###
QUESTION COPYRIGHT (C) LEETCODE
 
Given an array A of 0s and 1s, we may 
change up to K values from 0 to 1.
 
Return the length of the longest (contiguous)
 subarray that contains only 1s. 
 
  
 
Example 1:
 
Input: A = [1,1,1,0,0,0,1,1,1,1,0], K = 2
Output: 6
Explanation: 
[1,1,1,0,0,1,1,1,1,1,1]
Bolded numbers were flipped from 0 to 1.  
The longest subarray is underlined.
 
Example 2:
 
Input: A = [0,0,1,1,0,0,1,1,1,0,1,1,0,0,0,1,1,1,1], K = 3
Output: 10
Explanation: 
[0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1]
Bolded numbers were flipped from 0 to 1.  
The longest subarray is underlined.
 
  
 
Note:
 
    1 <= A.length <= 20000
    0 <= K <= A.length
    A[i] is 0 or 1 
###
Algorithm used is sliding window
Time complexity O(N)
space complexity O(1)
 
class Solution:
    def longestOnes(self, A: List[int], K: int) -> int:
        left_pointer = right_pointer = 0
        for right_pointer in range(len(A)):
            #if we encounter 0, we decrement K
            #since K is the maximum zeros allowed in a window
            if A[right_pointer] == 0:
                K -= 1
            #A negative K denotes we have used all allowed flpis 
            #this means window has more than needed 0s
            #Therefore, we increment left pointer by 1 
            #to keep thw window size the same
            if K < 0:
                #K is increase if the left element to be thown
                #out is 0
                K += 1 -A[left_pointer]
                left_pointer += 1
        return right_pointer - left_pointer +1
