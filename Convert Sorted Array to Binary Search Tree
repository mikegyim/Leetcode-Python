"""
QUESTION COPYRIGHT (C) LEETCODE
Given an array where elements are sorted 
in ascending order, convert it to a height balanced BST.
 
For this problem, a height-balanced
 binary tree is defined as a binary
 tree in which the depth of the two 
subtrees of every node never differ by more than 1.
 
Example:
 
Given the sorted array: [-10,-3,0,5,9],
 
One possible answer is: [0,-3,9,-10,null,5], which represents the following height balanced BST:
 
      0
     / \
   -3   9
   /   /
 -10  5
 
 
 
"""
 
solution 
 
Using Preorder Traversal: Always choose 
right middle node as a root
Time complexity O(N)
space complexity O(N)*(O(N) to keep the
 output and O(logN) 
for the recursion stack.
 
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def sortedArrayToBST(self, nums: List[int]) -> TreeNode:
        def helper(left, right):
            if left > right:
                return None
        #always choose middle node as the root
            c = (right + left)//2
            if (left + right) % 2:
                c += 1
            #preorder traversal node-> left->right
            root = TreeNode(nums[c])
            root.left = helper(left, c-1)
            root.right = helper(c+1, right)
            return root
        return helper(0, len(nums)-1)
