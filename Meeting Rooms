"""
QUESTION COPYRIGHT (C) LEETCODE
 
Given an array of meeting time 
intervals where intervals[i] = [starti, endi], 
determine if a person could attend all meetings.
 
  
 
Example 1:
 
Input: intervals = [[0,30],[5,10],[15,20]]
Output: false
 
Example 2:
 
Input: intervals = [[7,10],[2,4]]
Output: true
 
  
 
Constraints:
 
    0 <= intervals.length <= 104
    intervals[i].length == 2
    0 <= starti < endi <= 106
 
"""
solution 1
using sorting
Time complexity 0(NlogN)
space complexity O(1)
class Solution:
    def canAttendMeetings(self, intervals: List[List[int]]) -> bool:
        #sort the intervals by the start of the meetings
        intervals.sort(key = lambda x: x[0])
        #list to keep tracks of meetings being attended
        meeting_list = []
        for start, end in intervals:
            #if a meeting is not attended or the start
            #time is after or equal the end of the previous
            #meeting
            if not meeting_list or start >= meeting_list[-1][1]:
                meeting_list.append((start, end))
            else:
                #the meetings can't be attended because
                #the start time intersect with the previous end time
                return False
        #We know we have been able to attend the meeting
        #if we make it through the list
        return True
               
   solution 2
using sorting
Time complexity 0(NlogN)
Space = O(1)
class Solution:
    def canAttendMeetings(self, intervals: List[List[int]]) -> bool:
        #sort the meetings by the start time
        intervals.sort(key = lambda x: x[0])
        for i in range(len(intervals)-1):
            #if the end of previous meetings occurs after  
            #the start of another meeting
            #thats, prevEnd > currStart
            if intervals[i][1] > intervals[i+1][0]:
                return False
        else:
            return True
           
