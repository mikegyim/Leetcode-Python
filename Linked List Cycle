"""
QUESTION COPYRIGHT (C) LEETCODE
 
Given head, the head of a linked list, 
determine if the linked list has a cycle in it.
 
There is a cycle in a linked list if there 
is some node in the list that can be
 reached again by continuously following 
the next pointer. Internally, pos is 
used to denote the index of the node 
that tail's next pointer is connected to.
 Note that pos is not passed as a parameter.
 
Return true if there is a cycle in 
the linked list. Otherwise, return false.
 
  
 
Example 1:
 
Input: head = [3,2,0,-4], pos = 1
Output: true
Explanation: There is a cycle in the linked list, 
where the tail connects to the 1st node (0-indexed).
 
Example 2:
 
Input: head = [1,2], pos = 0
Output: true
Explanation: There is a cycle in the linked list,
 where the tail connects to the 0th node.
 
Example 3:
 
Input: head = [1], pos = -1
Output: false
Explanation: There is no cycle in the linked list.
 
  
 
Constraints:
 
    The number of the nodes in the list is in the range [0, 104].
    -105 <= Node.val <= 105
    pos is -1 or a valid index in the linked-list.
 
  
 
Follow up: Can you solve it using O(1) (i.e. constant) memory?
 
"""
 
If given a link list, use two pointers
So the approach is fast and slow pointers
Time complexity O(N) and space complexity O(1)
#The slow pointer moves one step at a time 
#while the fast pointer moves two steps at a time
# The fast pointer will eventually reach the end 
#if there's no cycle in the list
# and we can return False in this case
#If there is a cycle, the fast runner will
#eventually meed the slow runner
 
"""
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None
 
class Solution:
    def hasCycle(self, head: ListNode) -> bool:
        #both slow and fast start at the head
        slow = fast = head
        while(fast and fast.next):
            slow = slow.next 
            fast = fast.next.next
            #when slow and fast meet
            # cycle is present
            if slow == fast: return True
        else:
            return False
         
           OR
Example Full Code
 
class Node:
    def __init__(self, value, next = None):
        self.value = value
        self.next = next 
def has_cycle(head):
    fast, slow = head, head 
    while fast is not None and fast.next is not None:
        slow = slow.next 
        fast = fast.next.next 
 
        if slow == fast:
            return True
    return False
def main():
    head = Node(1)
    head.next = Node(2)
    head.next.next = Node(3)
    head.next.next.next = Node(4)
    head.next.next.next.next = Node(5)
    head.next.next.next.next.next = Node(6)
    head.next.next.next.next.next.next = Node(7)
 
    print("Answer " + str(has_cycle(head)))
    head.next.next.next.next.next.next = head.next.next
    print("Answer" + str(has_cycle(head)))
 
 
main()
 
# OUTPUT False, True,
