"""
QUESTION COPYRIGHT (C) LEETCODE

Given a non-negative integer numRows,
 generate the first numRows of Pascal's triangle.
 
 In Pascal's triangle, each number is the 
sum of the two numbers directly above it.
 Example:
 Input: 5 Output:
 [  [1],    
   [1,1],    
  [1,2,1],  
 [1,3,3,1], 
[1,4,6,4,1] ] 
"""

The approach is dynamic programming
Time complexity 0(numRows^2) and space complexity O(numRows^2)
class Solution:
     def generate(self, numRows: int) -> List[List[int]]:
         if numRows == 0: return []
         if numRows == 1: return [[1]]
         #lets start with a triangle with numRows one 
         triangle = [[1]]
         for i in range(1, numRows):
             row = [1]
             for j in range(1, i):
                 #each element is equal to the sum of the elements
                 #above-and-to-the-left and above-and-to-the-right
                 row.append(triangle[i-1][j-1]+triangle[i-1][j])
             row.append(1)
             triangle.append(row)
         return triangle
