"""
QUESTION COPYRIGHT (C) LEETCODE
Given a non-empty, singly linked list
 with head node head, return a
 middle node of linked list.
 
If there are two middle nodes, 
return the second middle node.
 
  
 
Example 1:
 
Input: [1,2,3,4,5]
Output: Node 3 from this list (Serialization: [3,4,5])
The returned node has value 3. 
 (The judge's serialization of this node is [3,4,5]).
Note that we returned a ListNode object ans, such that:
ans.val = 3, ans.next.val = 4, ans.next.next.val = 5, and ans.next.next.next = NULL.
 
Example 2:
 
Input: [1,2,3,4,5,6]
Output: Node 4 from this list (Serialization: [4,5,6])
Since the list has two middle 
nodes with values 3 and 4, we return the second one.
 
  
 
Note:
 
    The number of nodes in the given
 list will be between 1 and 100.
 
 
"""
Because it is a linked list
The approach use is slow and fast pointers
Time complexity O(N) 
space complexity O(1)
#You traverse through the list with pointer SLOW
#make another pointer, FAST that traverse twice
# as fast
#Therefore, SLOW must be middle when FAST
#reaches the end of the list
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def middleNode(self, head: ListNode) -> ListNode:
        #both slow and fast start from the head
        fast = slow = head
        while(fast and fast.next):
            slow = slow.next
            fast = fast.next.next
            #when the FAST reaches the end,
            # slow will be in the middle
        return slow
 
          OR
   
Full Code Example 
class Node():
    def __init__(self, value, next = None):
        self.value = value 
        self.next = next 
 
def middle(head):
    fast, slow = head, head 
 
    while fast is not None and fast.next is not None:
        fast = fast.next.next 
        slow = slow.next
    return slow 
def main():
    head = Node(1)
    head.next = Node(2)
    head.next.next = Node(3) 
    head.next.next.next = Node(4)
    head.next.next.next.next =  Node(5)
 
    print("Answer " + str(middle(head).value))
    head.next.next.next.next.next = Node(6)
    print("Answer " + str(middle(head).value))
    head.next.next.next.next.next.next = Node(7)
    print("Answer " + str(middle(head).value))
 
main()
 
OUTPUT
Answer 3
Answer 4
Answer 4
