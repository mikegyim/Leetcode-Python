QUESTION COPYRIGHT (C) LEETCODE
 
Given an array of integers A sorted 
in non-decreasing order, return an
 array of the squares of each number,
 also in sorted non-decreasing order.
 
  
 
Example 1:
 
Input: [-4,-1,0,3,10]
Output: [0,1,9,16,100]
 
Example 2:
 
Input: [-7,-3,2,3,11]
Output: [4,9,9,49,121]
 
  
 
Note:
 
    1 <= A.length <= 10000
    -10000 <= A[i] <= 10000
    A is sorted in non-decreasing order.
 
solution1 using two pointers
class Solution:
    def sortedSquares(self, A: List[int]) -> List[int]:
        i, j, result = 0, len(A) -1, []
        while i <= j:
            left = A[i] ** 2
            right = A[j] ** 2
            if left > right:
                result.append(left)
                i += 1
            else:
                result.append(right)
                j -= 1
        return result[::-1]
         
 
solution 2
using two pointer
Time Complexity: O(N), N is the length of A.
Space Complexity: O(N)
1) Solution idea from leetcode using two pointers 
Time complexity O(N) where N is the length of A and space complexity O(N)
class Solution:
    def sortedSquares(self, A: List[int]) -> List[int]:
        result = []
        N = len(A)
        # i,j: i for positive parts and j for negative parts
        i = 0
        while i < N and A[i] < 0:
            i += 1
        j = i-1
        while 0 <= j and i < N:
            if A[j]**2 < A[i]**2:
                result.append(A[j]**2)
                j -= 1
            else:
                result.append(A[i]**2)
                i += 1
        while j >= 0:
            result.append(A[j]**2)
            j -= 1
        while i < N:
            result.append(A[i]**2)
            i += 1
        return result
                 
 
2)
class Solution:
    def sortedSquares(self, A: List[int]) -> List[int]:
        return sorted(n*n for n in A)
 
3) class Solution:
    def sortedSquares(self, A: List[int]) -> List[int]:
        return sorted(list(map(lambda x: x*x, A)))
4)
OVERWRITING THE INPUT. 
Time Complexity O(NlogN), O(1) memory 
class Solution:
    def sortedSquares(self, A: List[int]) -> List[int]:
        for i in range(len(A)):
            A[i] *= A[i]
        A.sort()
        return A
         
5)
solution 
class Solution:
    def sortedSquares(self, A: List[int]) -> List[int]:
        result = []
        for x in A:
            result.append(x*x)
        return sorted(result)
5)
class Solution:
    def sortedSquares(self, A: List[int]) -> List[int]:
        result = [0]*len(A)
        l, r = 0, len(A)-1
        while l <= r:
            
            left, right = abs(A[l]), abs(A[r])
            if left > right:
                result[r-l] = left * left
                l += 1
            else:
                result[r-l] = right * right
                r -= 1
        return result
 
