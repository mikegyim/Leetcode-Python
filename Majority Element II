"""
QUESTION COPYRIGHT (C) LEETCODE
 
Given an integer array of size n, 
find all elements that appear more than ⌊ n/3 ⌋ times.
 
Follow-up: Could you solve the problem 
in linear time and in O(1) space?
 
  
 
Example 1:
 
Input: nums = [3,2,3]
Output: [3]
 
Example 2:
 
Input: nums = [1]
Output: [1]
 
Example 3:
 
Input: nums = [1,2]
Output: [1,2]
 
  
 
Constraints:
 
    1 <= nums.length <= 5 * 104
    -109 <= nums[i] <= 109
 
"""
#solution idea is from leetcode 
#using Boyer - Moore Voting Algorithm
 
class Solution:
    def majorityElement(self, nums: List[int]) -> List[int]:
        if not nums:
            return []
        #FIRST PASS: To find out two majority candidate  
        candidate1, candidate2, cnt1, cnt2 = None, None, 0, 0
        for x in nums:
            if candidate1 == x:
                cnt1 += 1
            elif candidate2 == x:
                cnt2 += 1
            elif cnt1 == 0:
                candidate1 = x
                cnt1 += 1
            elif cnt2 == 0:
                candidate2 = x
                cnt2 += 1
            else:
                cnt1 -= 1
                cnt2 -= 1
        #SECOND PASS: To find out if majority candidate are actually majority candidate
        ans = []
        for y in [candidate1, candidate2]:
            if nums.count(y) > len(nums)//3:
                ans.append(y)
        return ans
