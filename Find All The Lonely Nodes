In a binary tree, a lonely node is a node 
that is the only child of its parent node. 
The root of the tree is not lonely 
because it does not have a parent node.
 
Given the root of a binary tree, return an array containing 
the values of all lonely nodes in the tree. 
Return the list in any order.
 
solution 1
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def getLonelyNodes(self, root: TreeNode) -> List[int]:
        result = []
        def dfs(root):
            if not root:
                return
            if root.left and not root.right:
                result.append(root.left.val)
            if root.right and not root.left:
                result.append(root.right.val)
            if root.right:
                dfs(root.right)
            if root.left:
                dfs(root.left)
        dfs(root)
        return result
 
OR
#This is the fastest
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def getLonelyNodes(self, root: TreeNode) -> List[int]:
        result = []
        def dfs(root):
            if not root:
                return
            if root.left and not root.right:
                result.append(root.left.val)
            if root.right and not root.left:
                result.append(root.right.val)
           
            dfs(root.right)
             
            dfs(root.left)
        dfs(root)
        return result
 
 
 
 
solution 2
 
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def getLonelyNodes(self, root: TreeNode) -> List[int]:
        result = []
        def dfs(root):
            if not root:
                return
            if not root.left or not root.right:
                if root.left: result.append(root.left.val)
                if root.right: result.append(root.right.val)
            dfs(root.left)
            dfs(root.right)
        dfs(root)
        return result
 
 
 
solution 3
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def getLonelyNodes(self, root: TreeNode) -> List[int]:
        self.result = []
        def dfs(node):
            if node.left and not node.right:
                self.result.append(node.left.val)
            if node.right and not node.left:
                self.result.append(node.right.val)
            if node.left:
                dfs(node.left)
            if node.right:
                dfs(node.right)
        dfs(root)
        return self.result
         
