"""
QUESTION COPYRIGHT (C) LEETCODE
Given an array nums sorted in non-decreasing 
order, and a number target, return True if 
and only if target is a majority element.
 
A majority element is an element that 
appears more than N/2 times in an array of length N.
 
  
 
Example 1:
 
Input: nums = [2,4,5,5,5,5,5,6,6], target = 5
Output: true
Explanation: 
The value 5 appears 5 times and the length of the array is 9.
Thus, 5 is a majority element because 5 > 9/2 is true.
 
Example 2:
 
Input: nums = [10,100,101,101], target = 101
Output: false
Explanation: 
The value 101 appears 2 times and the length of the array is 4.
Thus, 101 is not a majority element because 2 > 4/2 is false.
 
  
 
Constraints:
 
    1 <= nums.length <= 1000
    1 <= nums[i] <= 10^9
    1 <= target <= 10^9
 
 
"""
Using Boyer- Moore Voting Algorithm
This is done by counting instances 
of the majority element as +1 and 
instances of any other element as -1
 
Time Complexity O(N) and space complexity O(1)
 
class Solution:
    def isMajorityElement(self, nums: List[int], target: int) -> bool:
        candidate = None
        count1 = 0
        for num in nums:
            if count1 == 0:
                candidate = num
                count1 += 1
            elif candidate == num:
                count1 += 1
            else:
                count1 -= 1
        #checking again to see if candidate is actually a major element 
        #and if it does appear more than N//2 times
        count2 = 0
        for num in nums:
            if candidate == num:
                count2 += 1
        return candidate == target and count2 > len(nums)//2
 
solution 2
Time Complexity O(N) and space complexity O(1)
class Solution:
    def isMajorityElement(self, nums: List[int], target: int) -> bool:
        length = len(nums)
        count = 0 
        for n in nums:
            if n == target:
                count += 1
        return count > len(nums)//2
 
solution 3
Time complexity is O(logN)
from bisect import bisect_right, bisect_left
class Solution:
    def isMajorityElement(self, nums: List[int], target: int) -> bool:
        x = bisect_right(nums, target)
        y = bisect_left(nums, target)
        return (x-y) > len(nums)//2
         
