"""
QUESTION COPYRIGHT (C)LEETCODE
 
 
You are given row x col grid 
representing a map where 
grid[i][j] = 1 represents land 
and grid[i][j] = 0 represents water.
 
Grid cells are connected horizontally/vertically (not diagonally).
 The grid is completely surrounded by water, 
and there is exactly one island 
(i.e., one or more connected land cells).
 
The island doesn't have "lakes", 
meaning the water inside isn't 
connected to the water around the island. 
One cell is a square with side length 1. 
The grid is rectangular, width and 
height don't exceed 100. Determine the perimeter of the island.
 
  
 
Example 1:
 
Input: grid = [[0,1,0,0],[1,1,1,0],[0,1,0,0],[1,1,0,0]]
Output: 16
Explanation: The perimeter is the 16 yellow stripes in the image above.
 
Example 2:
 
Input: grid = [[1]]
Output: 4
 
Example 3:
 
Input: grid = [[1,0]]
Output: 4
 
  
 
Constraints:
 
    row == grid.length
    col == grid[i].length
    1 <= row, col <= 100
    grid[i][j] is 0 or 1.
 
 
 
"""
time complexity = O(mn) where m is the number of rows of the grid and n is the number columns of the grid
space complexity = 0(1) because only the output variable is updated.
 
Algorithm using is counting and we only check UP and LEFT neighbors because  the DOWN and RIGHT of every land cell will be checked by the neighboring land cell's LEFT and UP.  
 
class Solution:
    def islandPerimeter(self, grid: List[List[int]]) -> int:
        output = 0
        rows = len(grid)
        columns= len(grid[0])
        for row in range(rows):
            for column in range(columns):
                if grid[row][column] == 1:
                    output += 4
                    if row > 0 and grid[row-1][column] == 1:
                        output -= 2
                    if column > 0 and grid[row][column-1] == 1:
                        output -= 2
        return output
        
