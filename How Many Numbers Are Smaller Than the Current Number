#Given the array nums, for each nums[i] 
#find out how many numbers in the array are smaller than it. That is, 
#for each nums[i] you have to count the number of valid 
#j's such that j != i and nums[j] < nums[i].
 
Return the answer in an array.
 
  
Example 1:
 
Input: nums = [8,1,2,2,3]
Output: [4,0,1,1,3]
Explanation: 
For nums[0]=8 there exist four smaller numbers than it (1, 2, 2 and 3). 
For nums[1]=1 does not exist any smaller number than it.
For nums[2]=2 there exist one smaller number than it (1). 
For nums[3]=2 there exist one smaller number than it (1). 
For nums[4]=3 there exist three smaller numbers than it (1, 2 and 2).
 
Example 2:
 
Input: nums = [6,5,4,8]
Output: [2,1,0,3]
 
Example 3:
 
Input: nums = [7,7,7,7]
Output: [0,0,0,0]
 
  
 
Constraints:
 
    2 <= nums.length <= 500
    0 <= nums[i] <= 100
 
Using sorting 
Time complexity O(logN)
space complexity O(N)
solution 1
class Solution:
    def smallerNumbersThanCurrent(self, nums: List[int]) -> List[int]:
        tempNum = sorted(nums)
        mapping = {}
        result = []
        for i in range(len(nums)):
            if tempNum[i] not in mapping:
                mapping[tempNum[i]] = i
        for i in nums:
            result.append(mapping[i])
        return result
 
OR 
class Solution:
    def smallerNumbersThanCurrent(self, nums: List[int]) -> List[int]:
        temp = sorted(nums)
        mapping = {}
        result = []
        for i in range(len(nums)):
            if temp[i] not in mapping:
                mapping[temp[i]] = i
        for i in range(len(nums)):
            result.append(mapping[nums[i]])
        return result
         
 
solution 2
class Solution:
    def smallerNumbersThanCurrent(self, nums: List[int]) -> List[int]:
        my_collect = collections.Counter(nums)
        my_dict = {}
        count = 0
        for i, c in sorted(my_collect.items()):
            my_dict[i] = count
            count += c
        return [my_dict[n] for n in nums]
         
 
             
solution3 
 
class Solution:
    def smallerNumbersThanCurrent(self, nums: List[int]) -> List[int]:
         
         return [sorted(nums).index(c) for c in nums]
 
solution4
class Solution:
    def smallerNumbersThanCurrent(self, nums: List[int]) -> List[int]:
        count = 0
        result = []
        for i in range(len(nums)):
            for j in range(len(nums)):
                 
                if nums[j] < nums[i] and nums[j] != nums[i]:
                    count += 1
            result.append(count)
            count = 0
        return result
                 
