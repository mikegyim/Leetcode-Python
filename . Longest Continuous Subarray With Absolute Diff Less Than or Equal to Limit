"""
QUESTION COPYRIGHT (C) LEETCODE
 
Given an array of integers nums and 
an integer limit, return the size of the
 longest non-empty subarray such that 
the absolute difference between any two 
elements of this subarray is less than or equal to limit.
 
  
 
Example 1:
 
Input: nums = [8,2,4,7], limit = 4
Output: 2 
Explanation: All subarrays are: 
[8] with maximum absolute diff |8-8| = 0 <= 4.
[8,2] with maximum absolute diff |8-2| = 6 > 4. 
[8,2,4] with maximum absolute diff |8-2| = 6 > 4.
[8,2,4,7] with maximum absolute diff |8-2| = 6 > 4.
[2] with maximum absolute diff |2-2| = 0 <= 4.
[2,4] with maximum absolute diff |2-4| = 2 <= 4.
[2,4,7] with maximum absolute diff |2-7| = 5 > 4.
[4] with maximum absolute diff |4-4| = 0 <= 4.
[4,7] with maximum absolute diff |4-7| = 3 <= 4.
[7] with maximum absolute diff |7-7| = 0 <= 4. 
Therefore, the size of the longest subarray is 2.
 
Example 2:
 
Input: nums = [10,1,2,4,7,2], limit = 5
Output: 4 
Explanation: The subarray [2,4,7,2] is the longest since the maximum absolute diff is |2-7| = 5 <= 5.
 
Example 3:
 
Input: nums = [4,2,2,2,4,4,2,2], limit = 0
Output: 3
 
  
 
Constraints:
 
    1 <= nums.length <= 10^5
    1 <= nums[i] <= 10^9
    0 <= limit <= 10^9
 
 
"""
Algorithm:
 Keep track of the max and min in two deques.
Time complexity is O(N)
space complexity is O(N)
 
Both solutions are the same. 
The first one I imported deque and 
the second one I didn't import deque
 
Solution 1
Using sliding window and deque
from collections import deque
class Solution:
    def longestSubarray(self, nums: List[int], limit: int) -> int:
        i = 0
        minQue, maxQue = deque(), deque()
        for num in nums:
            while minQue and minQue[-1] > num: minQue.pop()
            while maxQue and maxQue[-1] < num: maxQue.pop()
            minQue.append(num)
            maxQue.append(num)
            if maxQue[0] - minQue[0] > limit:
                if nums[i] == minQue[0]: minQue.popleft()
                if nums[i] == maxQue[0]: maxQue.popleft()
                i += 1
        return len(nums) -i
         
         
 
solution 2
Using sliding window and deque
class Solution:
    def longestSubarray(self, nums: List[int], limit: int) -> int:
        i = 0
        minQue,maxQue = [], []
        for num in nums:
            while minQue and minQue[-1] > num: minQue.pop()
            while maxQue and maxQue[-1] < num: maxQue.pop()
            minQue.append(num)
            maxQue.append(num)
            if maxQue[0] - minQue[0]  > limit:
                    if nums[i] == minQue[0]: minQue.pop(0)
                    if nums[i] == maxQue[0]: maxQue.pop(0)
                    i += 1
        return len(nums)-i
