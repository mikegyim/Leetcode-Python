Balanced strings are those who have equal quantity 
of 'L' and 'R' characters.
 
Given a balanced string s split it in 
the maximum amount of balanced strings.
 
Return the maximum amount of splitted balanced strings.
 
  
 
Example 1:
 
Input: s = "RLRRLLRLRL"
Output: 4
Explanation: s can be split into "RL", "RRLL", "RL", "RL", 
each substring contains same number of 'L' and 'R'.
 
Example 2:
 
Input: s = "RLLLLRRRLR"
Output: 3
Explanation: s can be split into "RL", "LLLRRR", "LR", 
each substring contains same number of 'L' and 'R'.
 
Example 3:
 
Input: s = "LLLLRRRR"
Output: 1
Explanation: s can be split into "LLLLRRRR".
 
Example 4:
 
Input: s = "RLRRRLLRLL"
Output: 2
Explanation: s can be split into "RL", "RRRLLRLL", 
since each substring contains an equal number of 'L' and 'R'
 
  
 
Constraints:
 
    1 <= s.length <= 1000
    s[i] = 'L' or 'R'
 
solution 1
class Solution:
    def balancedStringSplit(self, s: str) -> int:
        count = result = 0
        for i in s:
            if i == 'R':
                count += 1
            else:
                count -= 1
            if count == 0:
                result += 1
        return result
 
solution 2
class Solution:
    def balancedStringSplit(self, s: str) -> int:
        count = result = 0
        for S in s:
            if S =='L':
                count += 1
            else:
                count -= 1
            if count == 0:
                result += 1
        return result
         
solution 3
class Solution:
    def balancedStringSplit(self, s: str) -> int:
        count, countR, countL = 0,0,0
        for letter in s:
            if letter == "R":
                countR += 1
            if letter == "L":
                countL += 1
            if countL == countR: count += 1
        return count
             
         
        
