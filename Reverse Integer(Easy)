'''
Given a 32-bit signed integer, reverse digits of an integer.

Example 1:

Input: 123
Output: 321

Example 2:

Input: -123
Output: -321

Example 3:

Input: 120
Output: 21

Note:
Assume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [âˆ’231,  231 âˆ’ 1]. For the purpose of this problem, assume that your function returns 0 when the reversed integer overflows.

'''
solution 1
class Solution:
    def reverse(self, x):
        if (x >= 0):
            res = int(str(x)[::-1])
            return res if res < (2**31 - 1) and res > (-2)**31 else 0
        else:
            res = int("-" + (str(x)[1:][::-1]))
            return res if res < (2**31 - 1) and res > (-2)**31 else 0



solution 2


class Solution:
    def reverse(self, x: int) -> int:
        # initialize variable "ans" as a reversed string of the characters

        ans = str(x)[::-1]
# if the number was negative, the last character will be "-"
        # remove the "-" from the end of the string and turn into negative int of the characters
        if ans[-1] == "-":
            ans = -int(ans[:-1])
        # if the number was not negative, turn into an int

        else:
           ans = int(ans)
        # if the ans is larger than a 32-bit int, return 0

        if ans > 2**31 or ans < -2**31:
            return 0
        return ans
        
clear solution for 2
class Solution:
    def reverse(self, x: int) -> int:
        ans = str(x)[::-1]
        if ans[-1] == "-":
            ans = -int(ans[:-1])
        else:
           ans = int(ans)
        if ans > 2**31 or ans < -2**31:
            return 0
        return ans
        
Share this:
