"""
QUESTION COPYRIGHT (C) LEETCODE
Given a non-empty array of integers, 
every element appears three times except for one, 
which appears exactly once. Find that single one.
 
Note:
 
Your algorithm should have a linear runtime complexity.
 Could you implement it without using extra memory?
Example 1:
 
Input: [2,2,3,2]
Output: 3
 
Example 2:
 
Input: [0,1,0,1,0,1,99]
Output: 99
"""
RELATED QUESTIONS: single number iii, single number, 
find the duplicate number,
 find the difference, missing number
 
 
using dictionary
Time complexity O(N) and space complexity O(N)
from collections import defaultdict
class Solution:
    def singleNumber(self, nums: List[int]) -> int:
        Dict = defaultdict(int)
        for num in nums:
            Dict[num] += 1
        for num in Dict:
            if Dict[num] == 1:
                return num
           
Using hashset
Time complexity is O(N) and space complexity is O(N)
NB: 3Ã—(a+b+c)âˆ’(a+a+a+b+b+b+c)=2c   Therefore to obtain just c, you divide the whole equation by 2
 
class Solution:
    def singleNumber(self, nums: List[int]) -> int:
        return (3* sum(set(nums)) - sum(nums))//2
