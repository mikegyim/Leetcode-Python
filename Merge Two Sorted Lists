question copyright (c) leetcode
 
Merge two sorted linked lists and return it as a new sorted list. The new list should be made by splicing together the nodes of the first two lists.
 
  
 
Example 1:
 
Input: l1 = [1,2,4], l2 = [1,3,4]
Output: [1,1,2,3,4,4]
 
Example 2:
 
Input: l1 = [], l2 = []
Output: []
 
Example 3:
 
Input: l1 = [], l2 = [0]
Output: [0]
 
  
 
Constraints:
 
    The number of nodes in both lists is in the range [0, 50].
    -100 <= Node.val <= 100
    Both l1 and l2 are sorted in non-decreasing order.
 
solution 1
iterative approach 
Time complexity O(N +M)
space complexity O(1) since the existing nodes 
are reuse
 
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def mergeTwoLists(self, l1: ListNode, l2: ListNode) -> ListNode:
        #traverse through the list
        #always choose the node with the smaller key to
        #keep traversing
         
        #dummy(also called sentinel) is used to avoid
        #having to check for empty lists
        dummy_head = head = ListNode(0)
        while l1 and l2:
            if l1.val <= l2.val:
                head.next, l1 = l1, l1.next
            else:
                head.next, l2 = l2, l2.next
            head = head.next
        #append the remaining nodes of l1 or l2
        head.next = l1 or l2
        return dummy_head.next
         
 
 
solution 2
 
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
solutrion 1: recursion
Time complexity O(n+m)
space complexity O(n+m)
class Solution:
    def mergeTwoLists(self, l1: ListNode, l2: ListNode) -> ListNode:
        if l1 is None: return l2
        elif l2 is None: return l1
        elif l1.val < l2.val: 
            l1.next = self.mergeTwoLists(l1.next, l2)
            return l1
        else: 
            l2.next = self.mergeTwoLists(l1, l2.next)
            return l2
            
