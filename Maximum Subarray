QUESTION COPYRIGHT (C) LEETCODE
 
Given an integer array nums,
 find the contiguous subarray 
(containing at least one number) which 
has the largest sum and return its sum.
 
Follow up: If you have figured out the O(n) solution, 
try coding another solution using the 
divide and conquer approach, which is more subtle.
 
  
 
Example 1:
 
Input: nums = [-2,1,-3,4,-1,2,1,-5,4]
Output: 6
Explanation: [4,-1,2,1] has the largest sum = 6.
 
Example 2:
 
Input: nums = [1]
Output: 1
 
Example 3:
 
Input: nums = [0]
Output: 0
 
Example 4:
 
Input: nums = [-1]
Output: -1
 
Example 5:
 
Input: nums = [-2147483647]
Output: -2147483647
 
  
 
Constraints:
 
    1 <= nums.length <= 2 * 104
    -231 <= nums[i] <= 231 - 1
 
solution 1
 
using Dynamic Programming
Time complexity O(N) and space O(1)
class Solution:
    def maxSubArray(self, nums: List[int]) -> int:
        #max_end is the current sum
        max_end = max_seen = float(-inf)
        for a in nums:
            max_end = max(a, a+ max_end)
            max_seen = max(max_seen, max_end)
        return max_seen 
 
 
solution 2
using Dynamic programming
Time complexity 0(N)
 
class Solution:
    def maxSubArray(self, nums: List[int]) -> int:
        maxSum = float('-inf')
        currentSubArray  = float('-inf')
        for num in nums:
            AddingNum = currentSubArray + num
            if AddingNum > num: 
                currentSubArray =  AddingNum
            else: currentSubArray = num
            if currentSubArray > maxSum:
                maxSum = currentSubArray
        return maxSum
                 
