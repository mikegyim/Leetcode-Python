Let's call an array arr a mountain 
if the following properties hold:
 
    arr.length >= 3
    There exists some i with 0 < i < arr.length - 1 such that:
        arr[0] < arr[1] < ... arr[i-1] < arr[i]
        arr[i] > arr[i+1] > ... > arr[arr.length - 1]
 
Given an integer array arr that is
 guaranteed to be a mountain,
 return any i such that arr[0] < arr[1] < ... arr[i - 1] < arr[i] > arr[i + 1] > ... > arr[arr.length - 1].
 
  
 
Example 1:
 
Input: arr = [0,1,0]
Output: 1
 
Example 2:
 
Input: arr = [0,2,1,0]
Output: 1
 
Example 3:
 
Input: arr = [0,10,5,2]
Output: 1
 
Example 4:
 
Input: arr = [3,4,5,1]
Output: 2
 
Example 5:
 
Input: arr = [24,69,100,99,79,78,67,36,26,19]
Output: 2
 
  
 
Constraints:
 
    3 <= arr.length <= 104
    0 <= arr[i] <= 106
    arr is guaranteed to be a mountain array.
 
NB:Hint from leetcode: The mountain increases until it doesn't. The point at which it stops increasing is the peak. 
solution 1
using binary search
Time Complexity O(logN) and space complexity is O(1)
class Solution:
    def peakIndexInMountainArray(self, arr: List[int]) -> int:
        low, high = 0, len(arr)-1
        while low < high:
            middle = (low + high)//2
            if arr[middle] < arr[middle+1]:
                low = middle + 1
            else:
                high = middle
        return low
             
         
 
solution 2
Using linear Scan. Time complexity O(N) where N is the length of arrr and space complexity is O(1)
class Solution:
    def peakIndexInMountainArray(self, arr: List[int]) -> int:
        for i in range(len(arr)):
            if arr[i] > arr[i+1]:
                return i
             
 
solution 3
class Solution:
    def peakIndexInMountainArray(self, arr: List[int]) -> int:
        return arr.index(max(arr))
