"""
QUESTION COPYRIGHT (C) LEETCODE
 
Given a binary tree, return the 
bottom-up level order traversal of 
its nodes' values. (ie, from left to right, 
level by level from leaf to root).
 
For example:
Given binary tree [3,9,20,null,null,15,7],
 
    3
   / \
  9  20
    /  \
   15   7
 
return its bottom-up level order traversal as:
 
[
  [15,7],
  [9,20],
  [3]
]
 
"""
Using Iteration: BFS Traversal
Since it's BFS, use queue data structure
to find the shortest path
NB: DFS use stack
 
Time complexity O(N) because each node is
touched exactly once
Space complexity is O(N) to store the 
resulted structure which contains N node values
 
procedure
#two queues are initialize for current level
# and next level. root is added to the next level queue
#while nextlevel queue is not empty
  #initial currentlevel = nextlevel
  #and empty the next level nextlevel
  #the current level queue is iterated over
     #the node value is appended to the last level
     #in levels.
     # the left and then the right child node is added
     # into nextlevel queue
# the reversed levels is returned
"""
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def levelOrderBottom(self, root: TreeNode) -> List[List[int]]:
        #initialize two queues; current_level and next_level
        #add root to the next level queue
        levels = []
        next_level = ([root])
        while next_level and root:
            current_level = next_level
            #empty the next level next_level
            next_level = deque()
            levels.append([])
             
            for node in current_level:
                #append the current node val into the last level in levels
                levels[-1].append(node.val)
                #add first left and the n right child into the next_level queue
                if node.left:
                    next_level.append(node.left)
                if node.right:
                    next_level.append(node.right)
        #return revserved level
        return levels[::-1]
