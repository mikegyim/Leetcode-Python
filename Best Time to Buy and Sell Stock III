question copyright @leetcode
 
Say you have an array for which the ith 
element is the price of a given stock on day i.
 
Design an algorithm to find the maximum profit. 
You may complete at most two transactions.
 
Note: You may not engage in multiple transactions 
at the same time 
(i.e., you must sell the stock before you buy again).
 
  
 
Example 1:
 
Input: prices = [3,3,5,0,0,3,1,4]
Output: 6
Explanation: Buy on day 4 (price = 0) 
and sell on day 6 (price = 3), profit = 3-0 = 3.
Then buy on day 7 (price = 1) 
and sell on day 8 (price = 4), profit = 4-1 = 3.
 
Example 2:
 
Input: prices = [1,2,3,4,5]
Output: 4
Explanation: Buy on day 1 (price = 1) and 
sell on day 5 (price = 5), profit = 5-1 = 4.
Note that you cannot buy on day 1,
 buy on day 2 and sell them later, 
as you are engaging multiple transactions at the same time. 
You must sell before buying again.
 
Example 3:
 
Input: prices = [7,6,4,3,1]
Output: 0
Explanation: In this case, no transaction is done,
 i.e. max profit = 0.
 
Example 4:
 
Input: prices = [1]
Output: 0
 
  
 
Constraints:
 
    1 <= prices.length <= 105
    0 <= prices[i] <= 105
 
#Using one pass simulation. space complexity is O(1) 
and time complexity is O(n)
 
solution 
class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        minCost1, minCost2 = float('inf'), float('inf')
        maxProfit1, maxProfit2 = 0,0
        for price in prices:
            #maximum for only only transaction allowed
            minCost1 = min(minCost1, price)
            maxProfit1 = max(maxProfit1, price-minCost1)
            #reinvesting the gained profit in the second transaction. 
            #i.e minCost2 = price - maxProfit
            minCost2 = min(minCost2, price-maxProfit1)
            maxProfit2 = max(maxProfit2, price-minCost2)
        return maxProfit2
        
