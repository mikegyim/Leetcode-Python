'''
QUESTION COPYRIGHT (C) LEETCODE
    Given an array of integers, 
return indices of the two numbers 
such that they add up to a specific target.
    You may assume that each input 
would have exactly one solution, and
 you may not use the same element twice.
    Example:
    Given nums = [2, 7, 11, 15], target = 9,
    Because nums[0] + nums[1] = 2 + 7 = 9,
    return [0, 1].
'''
code with test cases
nums1 = [2,7,11,15]
target1 = 9
 
nums2 = [3,2,4]
target2 = 6
 
nums3 = [3,3]
target3 = 6
 
nums4 = [3,2,4]
target4 =6
def twoSum(nums, target):
    myDict = {}
    for i, num in enumerate(nums):
        diff = target-num
        if diff in myDict: return [myDict[diff], i]
        #if the diff is not in the array,
       # we continue to the next num
        else: myDict[num] = i 
#test cases
list1 = twoSum(nums1, target1)
print(list1)
list2 = twoSum(nums2, target2)
print(list2)
list3 = twoSum(nums3, target3)
print(list3)
list4 =twoSum(nums4, target4)
print(list4)
""""
outputs
[0, 1]                                                                                                                                                      
[1, 2]                                                                                                                                                      
[0, 1]                                                                                                                                                      
[1, 2]  
""""
 
 
solution 1
class Solution(object):
    def twoSum(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: List[int]
        """
        dict = {}
         
        for i , num in enumerate(nums):
            if target - num in dict:
                return (i, dict[target- num])
            else:
                dict[num] = i
 
solution 2
class Solution:
    def twoSum(self, nums: List[int], target: int) -> List[int]:
        my_dict = {}
        for i in range(len(nums)):
            if  nums[i] in my_dict: return [my_dict[nums[i]], i]
            else: my_dict[target-nums[i]] = i
 
solution 3
class Solution(object):
    def twoSum(self, nums, target):
        mapping = {}
 
        for index, val in enumerate(nums):
            diff = target - val
            if diff in mapping:
                return [index, mapping[diff]]
            else:
                mapping[val] = index
 
solution 4
class Solution:
    def twoSum(self, nums: List[int], target: int) -> List[int]:
        myDict = {}
        for i, num in enumerate(nums):
            n = target-num
            if n not in myDict:
                myDict[num] = i
            else: return [myDict[n], i]
