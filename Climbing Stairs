"""
QUESTION COPYRIGHT (C) LEETCODE
You are climbing a stair case. It takes n 
steps to reach to the top.
 
Each time you can either climb 1 or 2 steps.
 In how many distinct ways can you climb to the top?
 
Example 1:
 
Input: 2
Output: 2
Explanation: There are two ways to climb to the top.
1. 1 step + 1 step
2. 2 steps
 
Example 2:
 
Input: 3
Output: 3
Explanation: There are three ways to climb to the top.
1. 1 step + 1 step + 1 step
2. 1 step + 2 steps
3. 2 steps + 1 step
 
  
 
Constraints:
 
    1 <= n <= 45
 
 
"""
Related questions min cost climbing stairs, 
fibonacci number, N-th Tribonacci Number
 
using Fibonacci Number
#NB: The number us a Fibonacci Series. 
#Fibonacci is defined by Fn = Fn-1 + Fn-2
# It starts with F0 =0 and F1= 1
#Therefore, F2 = F1 + F0 = 1 + 0 = 1
# Therefore F3 = F2 + F1 + F0 = 2
#Sequence is 0,1,1,2,3,5,8,13
Below is the pattern
n  0  1  2  3  4  5
r  0  1  2  3  5  8
#You can see the Fibonacci sequence in the results. 
#Each time n is increased, the number of ways 
#to climb the staircase is the 
#sum of the previous two ways
 
class Solution:
    def climbStairs(self, n: int) -> int:
        a, b = 1, 1
        for i in range(n):
            a, b = b, a+ b
        return a
