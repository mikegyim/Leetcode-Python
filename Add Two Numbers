###
question copyright (c) LEETCODE
You are given two non-empty linked 
lists representing two non-negative integers. 
The digits are stored in reverse order, 
and each of their nodes contains a single digit. 
Add the two numbers and return the sum as a linked list.
 
You may assume the two numbers do not 
contain any leading zero, except the number 0 itself.
 
  
 
Example 1:
 
Input: l1 = [2,4,3], l2 = [5,6,4]
Output: [7,0,8]
Explanation: 342 + 465 = 807.
 
Example 2:
 
Input: l1 = [0], l2 = [0]
Output: [0]
 
Example 3:
 
Input: l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]
Output: [8,9,9,9,0,0,0,1]
 
  
 
Constraints:
 
    The number of nodes in each linked list is in the range [1, 100].
    0 <= Node.val <= 9
    It is guaranteed that the list represents a number that does not have leading zeros.
 
 
###
l1          1                  3                       1     
+           +                  +                       +
l2          1                  9                       1 
-----------------------------------------------------------------------------------
carry  0+1+1=2             0+3+9=12              1+1+1 = 3  
cur     2%10=2             12%10=2               3%10 = 3
carry  2//10 =0             12//10=1             3//10 = 0 
 
Approach: Elementary MATHS
 
Time Complexity = O(max(m,n) where m is the length l1 
and n is the length of l2. '+1' comes from carry
space complexity = O(max(m,n) +1)
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def addTwoNumbers(self, l1: ListNode, l2: ListNode) -> ListNode:
        dummy = cur = ListNode(0)
        carry = 0
        while l1 or l2 or carry:
            if l1:
                carry += l1.val
                l1 = l1.next
            if l2: 
                carry += l2.val
                l2 = l2.next
            cur.next = ListNode(carry%10)
            cur = cur.next
            carry //= 10
        return dummy.next
