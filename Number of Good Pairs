QUESTION COPYRIGHT (C) LEETCODE
Given an array of integers nums.
 
A pair (i,j) is called good if nums[i] == nums[j] and i < j.
 
Return the number of good pairs.
 
  
 
Example 1:
 
Input: nums = [1,2,3,1,1,3]
Output: 4
Explanation: There are 4 good pairs (0,3), (0,4), (3,4), (2,5) 0-indexed.
 
Example 2:
 
Input: nums = [1,1,1,1]
Output: 6
Explanation: Each pair in the array are good.
 
Example 3:
 
Input: nums = [1,2,3]
Output: 0
 
  
 
Constraints:
 
    1 <= nums.length <= 100
    1 <= nums[i] <= 100
 
 
solution 1
Since pairs are only created if nums[i] == nums[j].
and i < j, we deduce the ff conditions:
 
A hint from the example:
[1,1,1,1] have 6 combination
The first 1 has 3 pairs
The second 1 has 2 pairs
The third 1 has 1 pair
Since the combination is 3 + 2+ 1 = 6
#So just store every value count
# then count arithmetic sequence sum from 1 to n
#since n is the number of appearance for each number
"""
 If the value already exists in the myDict 
that means the number of new pairs is 
equal to the frequency since the 
current value can be paired with each prior occurrence .
"""
 
time complexity O(N) and space complexity O(N)
class Solution:
    def numIdenticalPairs(self, nums: List[int]) -> int:
        myCount = 0
        myDict = {}
        for n in nums:
            #check to see if number has already been encountered
            if n in myDict:
                #increase count by the number of previous instances
                myCount += myDict[n]
                #increase count of previous observation
                myDict[n] += 1
            else:
                #store newly encountered number along with its count
                myDict[n] = 1
        return  myCount
         
         
 
 
solution 2
class Solution:
    def numIdenticalPairs(self, nums: List[int]) -> int:
        result = 0
        for i in range(len(nums)):
            for j in range(len(nums)):
                if nums[i] == nums[j]:
                    if i<j:
                        result +=1
        return result
 
 
solution 3
class Solution:
    class Solution:
    def numIdenticalPairs(self, nums: List[int]) -> int:
        output = 0;
        for i in range(len(nums)):
            for j in range(len(nums)):
                if nums[i]==nums[j] and i<j:
                    output +=1
        return output
         
             
         
         
             
