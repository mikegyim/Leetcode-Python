Given head which is a reference node 
to a singly-linked list. 
The value of each node in the linked list is either 0 or 1. 
The linked list holds the binary representation of a number.
 
Return the decimal value of the number in the linked list.
 
  
 
Example 1:
 
Input: head = [1,0,1]
Output: 5
Explanation: (101) in base 2 = (5) in base 10
 
Example 2:
 
Input: head = [0]
Output: 0
 
Example 3:
 
Input: head = [1]
Output: 1
 
Example 4:
 
Input: head = [1,0,0,1,0,0,1,1,1,0,0,0,0,0,0]
Output: 18880
 
Example 5:
 
Input: head = [0,0]
Output: 0
 
  
 
Constraints:
 
    The Linked List is not empty.
    Number of nodes will not exceed 30.
    Each node's value is either 0 or 1.
 
# (101)2​ -> 1×22+0×21+1×20=51 \times 2^2 + 0 \times 2^1 + 1 \times 2^0 = 51×22+0×21+1×20=5. 
solution 1
#using Binary representation num = num * 2 + x
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def getDecimalValue(self, head: ListNode) -> int:
        result = head.val
        while head.next:
            result = result*2 + head.next.val
            head = head.next
        return result
 
solution2
#using  Bit Manipulation num = (num << 1) | head.next.val.
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def getDecimalValue(self, head: ListNode) -> int:
        result = head.val
        while head.next:
            result = (result<<1)|head.next.val
            head = head.next
        return result
