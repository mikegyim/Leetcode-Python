"""
QUESTION COPYRIGHT (C) LEETCODE
 
Given a non-empty binary tree, 
return the average value of the nodes 
on each level in the form of an array.
 
Example 1:
 
Input:
    3
   / \
  9  20
    /  \
   15   7
Output: [3, 14.5, 11]
Explanation:
The average value of nodes on level 0 is 3, 
 on level 1 is 14.5, and on level 2 is 11. 
Hence return [3, 14.5, 11].
 
Note:
 
    The range of node's value is in the 
range of 32-bit signed integer.
"""
using BFS
Time complexity O(N)
space O(N)
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
from collections import deque
class Solution:
    def averageOfLevels(self, root: TreeNode) -> List[float]:
        #initialize the average_level and queue
        #add root to the queue
        average_level = []
        queue  = deque([root])
        while queue:
            #valid nodes on the current level
            n = len(queue)
            totalSum = 0
            for _ in range(n):
                #one node is popped from the traversal queue
                node = queue.popleft()
                #add the value of the node on current level
                totalSum += node.val
                #add left child and then add right child 
                #if they exit
                if node.left:
                    queue.append(node.left)
                if node.right:
                    queue.append(node.right)
            #append the average_list value of the current level
            average_level.append(totalSum/n)
        return average_level
             
