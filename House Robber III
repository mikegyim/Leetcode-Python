"""
QUESTION COPYRIGHT(C) LEETCODE
 
The thief has found himself a new place
 for his thievery again. There is only 
one entrance to this area, called the "root.
" Besides the root, each house has 
one and only one parent house. 
After a tour, the smart thief realized
 that "all houses in this place forms a binary tree". 
It will automatically contact
 the police if two directly-linked
 houses were broken into on the same night.
 
Determine the maximum amount of money 
the thief can rob tonight without alerting the police.
 
Example 1:
 
Input: [3,2,3,null,3,null,1]
 
     3
    / \
   2   3
    \   \ 
     3   1
 
Output: 7 
Explanation: Maximum amount of 
money the thief can rob = 3 + 3 + 1 = 7.
 
Example 2:
 
Input: [3,4,5,1,3,null,1]
 
     3
    / \
   4   5
  / \   \ 
 1   3   1
 
Output: 9
Explanation: Maximum amount of money the
 thief can rob = 4 + 5 = 9.
"""
Using  Depth search first
Time complexity O(N)
space complexity O(N)
 
"""
Related questions House Robber and House Robber ii
 
The node(dpNode) in this dp tee is an array 
consisting of two elements. 
dPNode[0] = its the gain when you rob the current node
dpNode[1] = its the gain when you skip the current node
Since we are using depth first search,
we start by scanning through the leaf.
We have two choices for each node:
 
choice1: rob the node, then the child/children 
of the node can't be rob
dPNode[0]= node.val + dpNode.left[1] + dpNode.right[1]
 
choice2: you can rob or skip the child/children of the 
node when you skip the node
dpNode[1] max(dpNode.left[0], dpNode.left[1]) +
max(dpNode.right[0], dpNode.right[1])
NB: max(dpNode[0], dpNode[1]) is what the 
maximum gain of the node depends on
 
"""
 
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def rob(self, root: TreeNode) -> int:
        return max(self.dfs(root))
    def dfs(self, root: TreeNode) -> int:
        if not root:
            return (0,0)
        L = self.dfs(root.left)
        R = self.dfs(root.right)
        return root.val + L[1] + R[1], max(L[0], L[1]) + max(R[0], R[1])
         
        OR
 
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def rob(self, root: TreeNode) -> int:
        return max(self.dfs(root))
    def dfs(self, root: TreeNode) -> int:
        if not root: return (0, 0)
        L =self.dfs(root.left)
        R = self.dfs(root.right)
        rob_node = root.val + L[1] + R[1]
        notRob_node = max(L[0], L[1]) +  max(R[0], R[1])
        return rob_node,notRob_node
        
