"""
QUESTION COPYRIGHT (C) LEETCODE
 On a staircase, the i-th step has some 
non-negative cost cost[i] assigned (0 indexed).
 
Once you pay the cost, you can either 
climb one or two steps. You need to find minimum
 cost to reach the top of the floor, 
and you can either start from the 
step with index 0, or the step with index 1.
 
Example 1:
 
Input: cost = [10, 15, 20]
Output: 15
Explanation: Cheapest is start on cost[1],
 pay that cost and go to the top.
 
Example 2:
 
Input: cost = [1, 100, 1, 1, 1, 100, 1, 1, 100, 1]
Output: 6
Explanation: Cheapest is start on cost[0],
 and only step on 1s, skipping cost[3].
 
Note:
 
    cost will have a length in the range [2, 1000].
    Every cost[i] will be an integer in the range [0, 999].
 
"""
Related questions climbing stairs, fibonacci number, 
N-th Tribonacci Number, maximum distance in arrays,
best team with no conflicts, 
 Number of Sub-arrays of Size K and
 Average Greater than or Equal to Threshold
 
Dynamic Programming
Time complexity O(N) and space complexity O(1)
 
class Solution:
    def minCostClimbingStairs(self, cost: List[int]) -> int:
        #After the first two steps, loop through every cost
        for i in range(2, len(cost)):
            #the cheapest cost to step is updated here
            cost[i] += min(cost[i-2], cost[i-1])
            #The answer is the cheapest cost of the last two steps
        return min(cost[-2], cost[-1])
        
