/*
question copyright (c) leetcode
Given an integer array nums, 
return all the triplets [nums[i], nums[j], 
nums[k]] such that i != j, i != k, 
and j != k, and nums[i] + nums[j] + nums[k] == 0.

Notice that the solution set must
 not contain duplicate triplets. */

#Use two pointers. Time complexity O(N^2) and space complexity
O(N)

def three_sum(nums):
    nums.sort()
    triplets = []
    for i in range(len(nums)):
        if i> 0 and nums[i] == nums[i-1]:
            continue 
        search_pair(nums, nums[i], i+1, triplets) 
    return triplets 
    
def search_pair(nums, target_sum, left, triplets):
    right = len(nums) - 1 
    while(left < right):
        current_sum = nums[right] + nums[left]
        if current_sum == target_sum:
            triplets.append([-target_sum, nums[left], nums[right]]) 
            left += 1 
            right -= 1 
            while left < right and nums[left] == nums[left-1]:
                left += 1 
            while left < right and nums[right] == nums[right+1]:
                right -= 1 
        elif target_sum > current_sum:
            left += 1 
        else:
            right -= 1 
            
def main():
    print(three_sum([-1,0,1,2,-1,-4]))
    

main()
